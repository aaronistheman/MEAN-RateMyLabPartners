Current:
-must be able to access the data about a college
	-show selected College's name
		-need some way to pass the id to the url when going to the state
			-maybe in the option element, give it an id equal to its value,
			then in the form action, use the value to find the option element,
			and get the url (or at least the id)
			stored in that option element's data attribute
				-could this be easier without the form wrapper; just have my
				own button that, when clicked, handles the above logic?

		-next transition: in the route, PRINT the name of the college
		by grabbing it from the request body and using "console.warn()"
		-next, try to find the college in the database and
		pass it to appropriate template somehow
-find admin interface for MEAN OR read up on
interacting with MongoDB/Mongoose command line



Upcoming Tasks (not yet in any particular order)
(NOTE: it's okay if the webpage looks terrible at first):
-LabPartner model instance
	-College instances and LabPartner instances should have
	a one-to-many relationship
-User can leave review for a LabPartner
	-must require authentication in the appropriate route
-Review model instance
	-subject/class
	-rating
	-comments



Eventually:
-figure out a clean way to prevent duplicates (e.g. usernames,
colleges) without having to use similar boilerplate code in
the respective Express routes
-figure out how to split angularApp.js into multiple files
-should I be serializing the user?
-there are some parts of code that I initially neglected
copying from the tutorial; examine these;
should end up checking off the entire tutorial
-make the webpage look nice with CSS, Bootstrap, etc.
	-Bootstrap-related ideas
		-display reviews with <blockquote>
		-style login/registration forms (with default style?)
		-use the text/bg color classes for messges to the user
		(e.g. account created, wrong password)
		-use breadcrumbs to show hierarchy of college to
		lab partner
		-put the website logo in the navigation bar
		-perhaps put the college search bar into the
		navigation bar
		-perhaps fix navigation bar to page's top
		-collapse the nav bar if it takes too much space
		-use glyphicons where possible
-although this is a trivial app, should I *not* hardcode
the secret used for signing the tokens
	-is hardcoded in:
		-routes/index.js
		-mdoels/Users.js
	-could use environment variable instead


Junk users and passwords (for manual testing):
tahu nuva
Tahu Nuva