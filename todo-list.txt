Current:
-must be able to access the data about a college
	-user can search for college with a search bar (use
	the datalist element)
		-showing real data
			-there must be real data to show; make a way
			to add a college to the list
			-should require account to add college
				-user is shown a message that he must log
				in to see the form for adding a college
			-webpage must be given the list of webpages
			and display them
	-user is presented list of colleges (for now, a bullet
	point list)?
	-user can add a college to the list (for now, probably
	don't worry if it's too easy to do so)



Upcoming Tasks (not yet in any particular order)
(NOTE: it's okay if the webpage looks terrible at first):
-LabPartner model instance
	-College instances and LabPartner instances should have
	a one-to-many relationship
-User can leave review for a LabPartner
	-must require authentication in the appropriate route
-Review model instance
	-subject/class
	-rating
	-comments



Eventually:
-should I be serializing the user?
-there are some parts of code that I initially neglected
copying from the tutorial; examine these;
should end up checking off the entire tutorial
-make the webpage look nice with CSS, Bootstrap, etc.
-since this is a trivial app, should I *not* hardcode
the secret used for signing the tokens
	-is hardcoded in:
		-routes/index.js
		-mdoels/Users.js
	-could use environment variable instead


Junk users and passwords (for manual testing):
tahu nuva
Tahu Nuva